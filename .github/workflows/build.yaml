name: Build, Test, and (conditionally) Release

on:
  push:
    tags:
      - 'v*.*.*'
  pull_request:
    types: [ opened, synchronize, reopened ]
jobs:
  build:
    runs-on: ubuntu-24.04

    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
          cache-dependency-path: go.mod

      - name: Install dependencies
        run: go mod download

      - name: Install UPX v5 (On Tux only)
        if: matrix.goos == 'linux'
        run: |
          UPX_VERSION=5.0.0
          echo "Installing UPX for amd64, version $UPX_VERSION"
          curl -L https://github.com/upx/upx/releases/download/v$UPX_VERSION/upx-$UPX_VERSION-amd64_linux.tar.xz -o upx.tar.xz
          tar -xf upx.tar.xz
          sudo mv upx-$UPX_VERSION-amd64_linux/upx /usr/local/bin/
          rm -rf upx.tar.xz upx-$UPX_VERSION-amd64_linux
          upx --version
        shell: bash

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          # This option ensures no dependency in C Libraries
          CGO_ENABLED: 0
        run: |
          set -ex
          mkdir -p dist/${{ matrix.goos }}-${{ matrix.goarch }}
          go build -ldflags "-s -w" -o dist/${{ matrix.goos }}-${{ matrix.goarch }}/syncopatedb-${{ matrix.goos }}-${{ matrix.goarch }} cmd/main.go

      - name: Verify Binary is Statically Linked
        run: |
          set -ex
          # Display the file type
          file dist/${{ matrix.goos }}-${{ matrix.goarch }}/syncopatedb-${{ matrix.goos }}-${{ matrix.goarch }}
          
          # Run ldd and capture its output
          ldd_output=$(ldd dist/${{ matrix.goos }}-${{ matrix.goarch }}/syncopatedb-${{ matrix.goos }}-${{ matrix.goarch }} 2>&1 || true)
          
          # Display the ldd output for debugging purposes
          echo "$ldd_output"
          
          # Check if the output contains "not a dynamic executable"
          if echo "$ldd_output" | grep -q "not a dynamic executable"; then
            echo "✅ Binary is statically linked."
          else
            echo "❌ Binary is dynamically linked or ldd encountered an unexpected error."
            exit 1
          fi
        shell: bash

      # Compress Binary with UPX Using Installed UPX
      - name: Compress Binary with UPX
        if: matrix.goos == 'linux'
        run: |
          # Define the path to the binary
          BINARY_PATH="dist/${{ matrix.goos }}-${{ matrix.goarch }}/syncopatedb-${{ matrix.goos }}-${{ matrix.goarch }}"
          echo "Compressing $BINARY_PATH with UPX 5.0.0"
          
          # Compress the binary using UPX
          upx --best "$BINARY_PATH"
          
          # Optional: Display the compressed binary size
          du -h "$BINARY_PATH"
        shell: bash

      # Verify UPX Compression Integrity
      - name: Verify UPX Compression
        if: matrix.goos == 'linux'
        run: |
          BINARY_PATH="dist/${{ matrix.goos }}-${{ matrix.goarch }}/syncopatedb-${{ matrix.goos }}-${{ matrix.goarch }}"
          echo "Verifying UPX compression for $BINARY_PATH"
          
          # Check the file type
          file "$BINARY_PATH"
          
          # Verify the compressed binary
          upx -t "$BINARY_PATH"
        shell: bash

      - name: Upload build artifacts (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: dist/${{ matrix.goos }}-${{ matrix.goarch }}

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        if: success() && startsWith(github.ref, 'refs/tags/v')
        with:
          files: dist/${{ matrix.goos }}-${{ matrix.goarch }}/syncopatedb-${{ matrix.goos }}-${{ matrix.goarch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # New job to build and publish Docker image
  docker:
    needs: build
    # Only run this job if all builds succeed and we're on a tag
    if: success() && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install QEMU User-Mode Emulation
        run: sudo apt-get update && sudo apt-get install -y qemu-user

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      # Download both amd64 and arm64 binaries
      - name: Download Linux AMD64 binary
        uses: actions/download-artifact@v4
        with:
          name: dist-linux-amd64
          path: docker/linux-amd64/

      - name: Download Linux ARM64 binary
        uses: actions/download-artifact@v4
        with:
          name: dist-linux-arm64
          path: docker/linux-arm64/

      # Prepare binaries with correct names
      - name: Prepare binaries for multi-arch build
        run: |
          mkdir -p docker/bin/amd64 docker/bin/arm64
          cp docker/linux-amd64/syncopatedb-linux-amd64 docker/bin/amd64/syncopatedb
          cp docker/linux-arm64/syncopatedb-linux-arm64 docker/bin/arm64/syncopatedb
          chmod +x docker/bin/amd64/syncopatedb docker/bin/arm64/syncopatedb

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      # Create and push the AMD64 image
      - name: Build and Push AMD64 Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./docker
          file: ./docker/Dockerfile
          platforms: linux/amd64
          push: true
          build-args: |
            ARCH=amd64
          tags: |
            phillarmonic/syncopatedb:${{ steps.get_version.outputs.VERSION }}-amd64
          cache-from: type=registry,ref=phillarmonic/syncopatedb:buildcache-amd64
          cache-to: type=registry,ref=phillarmonic/syncopatedb:buildcache-amd64,mode=max

      # Create and push the ARM64 image
      - name: Build and Push ARM64 Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./docker
          file: ./docker/Dockerfile
          platforms: linux/arm64
          push: true
          build-args: |
            ARCH=arm64
          tags: |
            phillarmonic/syncopatedb:${{ steps.get_version.outputs.VERSION }}-arm64
          cache-from: type=registry,ref=phillarmonic/syncopatedb:buildcache-arm64
          cache-to: type=registry,ref=phillarmonic/syncopatedb:buildcache-arm64,mode=max

      # Create and push the multi-arch manifest
      - name: Create and Push Multi-arch Manifest
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          DOCKER_USER=${{ secrets.DOCKER_USERNAME }}
          
          # Create and push the manifest for the versioned tag
          docker manifest create phillarmonic/syncopatedb:$VERSION \
            phillarmonic/syncopatedb:$VERSION-amd64 \
            phillarmonic/syncopatedb:$VERSION-arm64
          
          docker manifest push phillarmonic/syncopatedb:$VERSION
          
          # Create and push the manifest for the latest tag
          docker manifest create phillarmonic/syncopatedb:latest \
            phillarmonic/syncopatedb:$VERSION-amd64 \
            phillarmonic/syncopatedb:$VERSION-arm64
          
          docker manifest push phillarmonic/syncopatedb:latest